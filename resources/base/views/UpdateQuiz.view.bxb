// See the UpdatQuiz.dialog for localized strings

input-view {
	match: Answer(this) {
		to-input: UpdateQuiz(action)
	}

	message {
		template-macro (UPDATE_QUIZ_PROMPT) {
      param (quiz) {
        expression (action.quiz)
      }
    }
	}

	render {
		if (size(action.quiz.questions[action.quiz.index].options) > 0) {
			selection-of (action.quiz.questions[action.quiz.index].options) {
				where-each (option) {
					spoken-summary {
						template ("#{value(option.alias)} ... #{value(option.text)}")
					}
					cell-card {
						slot2 {
							content {
								primary {
									template ("[#{value(option.alias)}. ]#{value(option.text)}")
								}
							}
						}
					}
				}
				navigation-mode {
					read-many {
						page-size (5)
						list-summary {
              template-macro (UPDATE_QUIZ_PROMPT) {
                param (quiz) {
                  expression (action.quiz)
                }
              }
						}
            page-content (page) {
              underflow-statement {
                template-macro (HANDS_FREE_OPTION_UNDERFLOW_STATEMENT)
              }
              item-selection-question {
                if (isFirstNavPage(page) && isLastNavPage(page)) {
                  template ("")
                } else-if (!isLastNavPage(page)) {
                  template-macro (HANDS_FREE_OPTION_ITEM_SELECTION_MORE_PAGES)
                } else {
                  template-macro (HANDS_FREE_OPTION_ITEM_SELECTION_LAST_PAGES)
                }
              }
              overflow-statement {
                template-macro (HANDS_FREE_OPTION_OVERFLOW_STATEMENT)
              }
              overflow-question {
                template-macro (HANDS_FREE_OPTION_OVERFLOW_QUESTION)
              }
              page-marker {
                if (!isFirstNavPage(page) && isLastNavPage(page)) {
                  template-macro (HANDS_FREE_OPTION_LAST_OPTION) {
                    param (page) {
                      expression (page)
                    }
                  }
                }
              }
            }
					}
				}
			}
		} else {
			form {
				elements {
					text-input {
						id (answer)
						type (Answer)
					}
				}
				on-submit {
					goal: Answer
					value: viv.core.FormElement(answer)
				}
			}
		}
	}
}